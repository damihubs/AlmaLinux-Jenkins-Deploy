name: Incremental Deployment with Fail-Safe Measures

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Check if Resource Group Exists and Handle Deleting State
    - name: Check Resource Group
      id: check-rg
      run: |
        rg_exists=$(az group exists --name divergenceRG2)
        if [ "$rg_exists" == "true" ]; then
          rg_state=$(az group show --name divergenceRG2 --query "properties.provisioningState" -o tsv)
          if [ "$rg_state" == "Deleting" ]; then
            echo "Resource group is in Deleting state. Cleaning up..."
            az group delete --name divergenceRG2 --yes --no-wait
            echo "exists=false" >> $GITHUB_ENV
          else
            echo "Resource Group exists."
            echo "exists=true" >> $GITHUB_ENV
          fi
        else
          echo "Resource Group does not exist."
          echo "exists=false" >> $GITHUB_ENV

    # Conditionally create the Resource Group if it doesn't exist
    - name: Create Resource Group (if not exists)
      if: env.exists == 'false'
      run: |
        az group create --name divergenceRG2 --location eastus

    # Query Available AlmaLinux Images
    - name: Query Available AlmaLinux Images
      id: image-search
      run: |
        az vm image list --offer almalinux --all --output json > image_list.json
        latest_image=$(jq -r 'sort_by(.version) | reverse | .[] | select(.offer == "almalinux") | .urn' image_list.json | head -n 1)
        echo "Latest AlmaLinux Image URN: $latest_image"
        echo "::set-output name=image-urn::$latest_image"

    # Check if VM exists before creating it
    - name: Check if VM Exists
      id: check-vm
      run: |
        vm_exists=$(az vm list --resource-group divergenceRG2 --query "[?name=='AlmaLinuxVM'].name" -o tsv)
        if [ -z "$vm_exists" ]; then
          echo "VM does not exist."
          echo "vm_exists=false" >> $GITHUB_ENV
        else
          echo "VM already exists."
          echo "vm_exists=true" >> $GITHUB_ENV

    # Conditionally Create AlmaLinux VM only if it doesn't exist
    - name: Create AlmaLinux VM
      if: env.vm_exists == 'false'
      run: |
        az vm create \
          --resource-group divergenceRG2 \
          --name AlmaLinuxVM \
          --image ${{ steps.image-search.outputs.image-urn }} \
          --admin-username azureuser \
          --generate-ssh-keys

    # Conditionally Open Ports in NSG if the VM is newly created
    - name: Open Ports in NSG for HTTP and Jenkins
      if: env.vm_exists == 'false'
      run: |
        az network nsg rule create \
          --resource-group divergenceRG2 \
          --nsg-name AlmaLinuxVMNSG \
          --name AllowHTTP \
          --protocol tcp \
          --priority 1001 \
          --destination-port-ranges 80 \
          --access allow

    - name: Open Ports in NSG for Jenkins
      if: env.vm_exists == 'false'
      run: |
        az network nsg rule create \
          --resource-group divergenceRG2 \
          --nsg-name AlmaLinuxVMNSG \
          --name AllowJenkins \
          --protocol tcp \
          --priority 1002 \
          --destination-port-ranges 8080 \
          --access allow

    - name: Open Ports in NSG for SSH
      if: env.vm_exists == 'false'
      run: |
        az network nsg rule create \
          --resource-group divergenceRG2 \
          --nsg-name AlmaLinuxVMNSG \
          --name AllowSSH \
          --protocol tcp \
          --priority 1003 \
          --destination-port-ranges 22 \
          --access allow

    # Install Jenkins on the VM (Always run if the VM exists)
    - name: Install Jenkins on AlmaLinux VM
      run: |
        ssh -i /home/runner/.ssh/id_rsa azureuser@$(az vm show --resource-group divergenceRG2 --name AlmaLinuxVM --show-details --query [publicIpAddress] -o tsv) <<EOF
        sudo yum update -y
        sudo yum install -y java-11-openjdk
        sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
        sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
        sudo yum install -y jenkins
        sudo systemctl enable jenkins
        sudo systemctl start jenkins
        EOF

    # Cleanup on failure (Optional step)
    - name: Cleanup on Failure
      if: failure()
      run: |
        echo "Cleaning up resources due to failure..."
        az group delete --name divergenceRG2 --yes --no-wait
