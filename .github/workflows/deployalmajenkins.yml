name: AlmaLinux VM Deployment with Jenkins Setup

on:
  push:
    branches:
      - main

jobs:
  create-resource-group:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Step 1: Create Resource Group if not exists
    - name: Create Resource Group if not exists
      run: |
        rg_exists=$(az group exists --name divergenceRG2)
        if [ "$rg_exists" = false ]; then
          echo "Creating resource group divergenceRG2..."
          az group create --name divergenceRG2 --location eastus
          echo "Resource group created."
        else
          echo "Resource group divergenceRG2 already exists. Skipping creation."
        fi

  deploy:
    runs-on: ubuntu-latest
    needs: create-resource-group

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Step 2: Generate SSH Keys if not exist
    - name: Generate SSH Keys
      run: |
        if [ ! -f ~/.ssh/id_rsa ]; then
          ssh-keygen -t rsa -b 2048 -f ~/.ssh/id_rsa -N ""
          echo "SSH keys generated."
        else
          echo "SSH keys already exist. Skipping generation."
        fi

    # Step 3: Create Networking Components (skip if exists)
    - name: Create Virtual Network and Subnet if not exists
      run: |
        vnet_exists=$(az network vnet show --resource-group divergenceRG2 --name AlmaLinuxVNet --query id --output tsv || echo "None")
        if [ "$vnet_exists" = "None" ]; then
          az network vnet create --resource-group divergenceRG2 --name AlmaLinuxVNet --subnet-name AlmaLinuxSubnet --location eastus
          echo "Virtual Network and Subnet created."
        else
          echo "Virtual Network AlmaLinuxVNet already exists. Skipping creation."
        fi

    - name: Create Network Security Group if not exists
      run: |
        nsg_exists=$(az network nsg show --resource-group divergenceRG2 --name AlmaLinuxNSG --query id --output tsv || echo "None")
        if [ "$nsg_exists" = "None" ]; then
          az network nsg create --resource-group divergenceRG2 --name AlmaLinuxNSG --location eastus
          echo "Network Security Group created."
        else
          echo "Network Security Group AlmaLinuxNSG already exists. Skipping creation."
        fi

    - name: Create Public IP if not exists
      run: |
        public_ip_exists=$(az network public-ip show --resource-group divergenceRG2 --name AlmaLinuxPublicIP --query id --output tsv || echo "None")
        if [ "$public_ip_exists" = "None" ]; then
          az network public-ip create --resource-group divergenceRG2 --name AlmaLinuxPublicIP --allocation-method Static --location eastus
          echo "Public IP created."
        else
          echo "Public IP AlmaLinuxPublicIP already exists. Skipping creation."
        fi

    - name: Create Network Interface if not exists
      run: |
        nic_exists=$(az network nic show --resource-group divergenceRG2 --name AlmaLinuxNIC --query id --output tsv || echo "None")
        if [ "$nic_exists" = "None" ]; then
          az network nic create --resource-group divergenceRG2 --name AlmaLinuxNIC --vnet-name AlmaLinuxVNet --subnet AlmaLinuxSubnet --network-security-group AlmaLinuxNSG --public-ip-address AlmaLinuxPublicIP
          echo "Network Interface created."
        else
          echo "Network Interface AlmaLinuxNIC already exists. Skipping creation."
        fi

    # Step 4: Query Available AlmaLinux Images and select the latest
    - name: Query Available AlmaLinux Images
      id: image-search
      run: |
        latest_image=$(az vm image list --offer almalinux --all --output json | jq -r 'sort_by(.version) | reverse | .[] | select(.offer == "almalinux") | .urn' | head -n 1)
        if [ -z "$latest_image" ]; then
          echo "Failed to retrieve AlmaLinux image URN."
          exit 1
        else
          echo "Latest AlmaLinux Image URN: $latest_image"
          echo "::set-output name=image-urn::$latest_image"
        fi

    # Step 5: Create AlmaLinux VM if not exists
    - name: Create AlmaLinux VM
      run: |
        vm_exists=$(az vm show --resource-group divergenceRG2 --name AlmaLinuxVM --query id --output tsv || echo "None")
        if [ "$vm_exists" = "None" ]; then
          image_urn=${{ steps.image-search.outputs.image-urn }}
          if [ -z "$image_urn" ]; then
            echo "Image URN is empty. Stopping the workflow."
            exit 1
          fi
          az vm create \
            --resource-group divergenceRG2 \
            --name AlmaLinuxVM \
            --image "$image_urn" \
            --admin-username azureuser \
            --nics AlmaLinuxNIC \
            --ssh-key-values ~/.ssh/id_rsa.pub
          echo "AlmaLinux VM created."
        else
          echo "AlmaLinux VM already exists. Skipping creation."
        fi

    # Step 6: Wait for VM and Public IP Assignment
    - name: Wait for VM and Public IP Assignment
      run: |
        echo "Waiting for 240 seconds to allow the VM to fully initialize..."
        sleep 240

    # Step 7: Retrieve Public IP Address and verify
    - name: Retrieve Public IP Address
      run: |
        public_ip=""
        for i in {1..10}; do
          public_ip=$(az network public-ip show --resource-group divergenceRG2 --name AlmaLinuxPublicIP --query ipAddress -o tsv)
          if [ -z "$public_ip" ]; then
            echo "Public IP not assigned yet. Retrying in 30 seconds..."
            sleep 30
          else
            echo "Public IP: $public_ip"
            echo "public_ip=$public_ip" >> $GITHUB_ENV
            break
          fi
        done
        if [ -z "$public_ip" ]; then
          echo "Failed to retrieve Public IP after multiple attempts."
          exit 1
        fi

    # Step 8: Verify NSG Rule for SSH is Active
    - name: Verify SSH Port Open in NSG
      run: |
        rule_exists=$(az network nsg rule show --resource-group divergenceRG2 --nsg-name AlmaLinuxNSG --name AllowSSH --query id --output tsv || echo "None")
        if [ "$rule_exists" = "None" ]; then
          echo "NSG Rule for SSH is not present. Creating rule."
          az network nsg rule create \
            --resource-group divergenceRG2 \
            --nsg-name AlmaLinuxNSG \
            --name AllowSSH \
            --protocol tcp \
            --priority 1001 \
            --destination-port-ranges 22 \
            --access allow || true
        else
          echo "NSG Rule for SSH already exists."
        fi

    # Step 9: Open Ports in NSG for HTTP and Jenkins
    - name: Open Ports in NSG for HTTP
      run: |
        az network nsg rule create \
          --resource-group divergenceRG2 \
          --nsg-name AlmaLinuxNSG \
          --name AllowHTTP \
          --protocol tcp \
          --priority 1002 \
          --destination-port-ranges 80 \
          --access allow || true

    - name: Open Ports in NSG for Jenkins
      run: |
        az network nsg rule create \
          --resource-group divergenceRG2 \
          --nsg-name AlmaLinuxNSG \
          --name AllowJenkins \
          --protocol tcp \
          --priority 1003 \
          --destination-port-ranges 8080 \
          --access allow || true

    # Step 10: Install Jenkins on the AlmaLinux VM using SSH
    - name: Install Jenkins on AlmaLinux VM
      run: |
        for i in {1..10}; do
          echo "Attempting SSH connection to ${public_ip} (Attempt $i)..."
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i ~/.ssh/id_rsa azureuser@${public_ip} << 'EOF'
        sudo yum update -y
        sudo yum install -y java-11-openjdk
        sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
        sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
        sudo yum install -y jenkins
        sudo systemctl enable jenkins
        sudo systemctl start jenkins
        EOF
          if [ $? -eq 0 ]; then
            echo "Jenkins installed successfully."
            break
          else
            echo "Failed to SSH into the VM. Retrying in 30 seconds..."
            sleep 30
          fi
          if [ $i -eq 10 ]; then
            echo "Failed to install Jenkins after multiple attempts."
            exit 1
          fi
        done

    # Step 11: Cleanup on failure
    - name: Cleanup on Failure
      if: failure()
      run: |
        if az group exists --name divergenceRG2; then
          echo "Cleaning up resources due to failure..."
          az group delete --name divergenceRG2 --yes --no-wait
        else
          echo "No resource group found for cleanup."
        fi
