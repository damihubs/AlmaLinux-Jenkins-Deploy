name: Debug AlmaLinux VM Deployment

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Step 1: Directly Check Resource Group and Print
    - name: Check Resource Group
      run: |
        bash -c "if az group exists --name divergenceRG2; then echo 'Resource Group exists.'; echo 'exists=true' >> $GITHUB_ENV; else echo 'Resource Group does not exist.'; echo 'exists=false' >> $GITHUB_ENV; fi"

    # Step 2: Conditionally Create Resource Group if not exists
    - name: Create Resource Group
      if: env.exists == 'false'
      run: |
        az group create --name divergenceRG2 --location eastus

    # Step 3: Query Available AlmaLinux Images
    - name: Query Available AlmaLinux Images
      id: image-search
      run: |
        echo "Querying AlmaLinux images..."
        az vm image list --offer almalinux --all --output table
        latest_image=$(az vm image list --offer almalinux --all --output json | jq -r 'sort_by(.version) | reverse | .[] | select(.offer == "almalinux") | .urn' | head -n 1)
        echo "::set-output name=image-urn::$latest_image"

    # Step 4: Directly Check if VM Exists and Print
    - name: Check if VM Exists
      run: |
        bash -c "if az vm show --resource-group divergenceRG2 --name AlmaLinuxVM > /dev/null 2>&1; then echo 'VM exists.'; echo 'vm_exists=true' >> $GITHUB_ENV; else echo 'VM does not exist.'; echo 'vm_exists=false' >> $GITHUB_ENV; fi"

    # Step 5: Conditionally Create AlmaLinux VM only if it doesn't exist
    - name: Create AlmaLinux VM
      if: env.vm_exists == 'false'
      run: |
        az vm create \
          --resource-group divergenceRG2 \
          --name AlmaLinuxVM \
          --image ${{ steps.image-search.outputs.image-urn }} \
          --admin-username azureuser \
          --generate-ssh-keys

    # Step 6: Conditionally Open Ports in NSG for HTTP, Jenkins, and SSH if the VM is newly created
    - name: Open Ports in NSG for HTTP and Jenkins
      if: env.vm_exists == 'false'
      run: |
        az network nsg rule create \
          --resource-group divergenceRG2 \
          --nsg-name AlmaLinuxVMNSG \
          --name AllowHTTP \
          --protocol tcp \
          --priority 1001 \
          --destination-port-ranges 80 \
          --access allow

    - name: Open Ports in NSG for Jenkins
      if: env.vm_exists == 'false'
      run: |
        az network nsg rule create \
          --resource-group divergenceRG2 \
          --nsg-name AlmaLinuxVMNSG \
          --name AllowJenkins \
          --protocol tcp \
          --priority 1002 \
          --destination-port-ranges 8080 \
          --access allow

    - name: Open Ports in NSG for SSH
      if: env.vm_exists == 'false'
      run: |
        az network nsg rule create \
          --resource-group divergenceRG2 \
          --nsg-name AlmaLinuxVMNSG \
          --name AllowSSH \
          --protocol tcp \
          --priority 1003 \
          --destination-port-ranges 22 \
          --access allow

    # Step 7: Install Jenkins on the VM
    - name: Install Jenkins on AlmaLinux VM
      run: |
        ssh -i /home/runner/.ssh/id_rsa azureuser@$(az vm show --resource-group divergenceRG2 --name AlmaLinuxVM --show-details --query [publicIpAddress] -o tsv) <<EOF
        sudo yum update -y
        sudo yum install -y java-11-openjdk
        sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
        sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
        sudo yum install -y jenkins
        sudo systemctl enable jenkins
        sudo systemctl start jenkins
        EOF

    # Step 8: Cleanup on failure
    - name: Cleanup on Failure
      if: failure()
      run: |
        if az group exists --name divergenceRG2; then
          echo "Cleaning up resources due to failure..."
          az group delete --name divergenceRG2 --yes --no-wait
        else
          echo "No resource group found for cleanup."
